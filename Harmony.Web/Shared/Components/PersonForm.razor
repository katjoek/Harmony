<!-- Harmony.Web/Shared/Components/PersonForm.razor -->
@using Harmony.Application.Features.People.Commands.CreatePerson
@using Harmony.Application.Features.People.Commands.UpdatePerson
@using Microsoft.AspNetCore.Components.Forms

<EditForm Model="@Model" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>First Name</label>
        <InputText @bind-Value="Model.FirstName" class="form-control" />
        <ValidationMessage For="@(() => Model.FirstName)" />
    </div>

    <div class="form-group">
        <label>Middle Name</label>
        <InputText @bind-Value="Model.MiddleName" class="form-control" />
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <InputText @bind-Value="Model.LastName" class="form-control" />
        <ValidationMessage For="@(() => Model.LastName)" />
    </div>

    <div class="form-group">
        <label>Street and House Number</label>
        <InputText @bind-Value="Model.StreetAndHouseNumber" class="form-control" />
        <ValidationMessage For="@(() => Model.StreetAndHouseNumber)" />
    </div>

    <div class="form-group">
        <label>City</label>
        <InputText @bind-Value="Model.City" class="form-control" />
        <ValidationMessage For="@(() => Model.City)" />
    </div>

    <div class="form-group">
        <label>Zip Code</label>
        <InputText @bind-Value="Model.ZipCode" class="form-control" />
        <ValidationMessage For="@(() => Model.ZipCode)" />
    </div>

    <div class="form-group">
        <label>Phone Number</label>
        <InputText @bind-Value="Model.PhoneNumber" class="form-control" />
        <ValidationMessage For="@(() => Model.PhoneNumber)" />
    </div>

    <div class="form-group">
        <label>Email Address</label>
        <InputText @bind-Value="Model.EmailAddress" class="form-control" />
        <ValidationMessage For="@(() => Model.EmailAddress)" />
    </div>

    <div class="form-group">
        <label>Date of Birth</label>
        <InputDate @bind-Value="Model.DateOfBirth" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary mt-3">@SubmitButtonText</button>
    <button type="button" class="btn btn-secondary mt-3" @onclick="OnCancel">Cancel</button>
</EditForm>

@code {
    [Parameter]
    public PersonFormModel Model { get; set; } = new();

    [Parameter]
    public string SubmitButtonText { get; set; } = "Submit";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }
    
    private async Task HandleValidSubmit()
    {
        // Your logic for handling the valid submit here
        // This is typically where you'd call your command to create/update the person
        if (OnValidSubmit.HasDelegate)
        {
            await OnValidSubmit.InvokeAsync(null); // Trigger the callback if it's passed in
        }
    }
}